//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ProxyWS.SOAPSmsQueue {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TSOAPSoapBinding", Namespace="http://magfa.com/soap/SOAPSmsQueue")]
    public partial class SoapSmsQueuableImplementationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback enqueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMessageStatusesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMessageIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SoapSmsQueuableImplementationService() {
            this.Url = "http://80.253.147.99/services/urn:SOAPSmsQueue";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event enqueueCompletedEventHandler enqueueCompleted;
        
        /// <remarks/>
        public event getMessageStatusesCompletedEventHandler getMessageStatusesCompleted;
        
        /// <remarks/>
        public event getMessageStatusCompletedEventHandler getMessageStatusCompleted;
        
        /// <remarks/>
        public event getCreditCompletedEventHandler getCreditCompleted;
        
        /// <remarks/>
        public event getMessageIdCompletedEventHandler getMessageIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://magfa.com/soap/SOAPSmsQueue", ResponseNamespace="http://magfa.com/soap/SOAPSmsQueue")]
        [return: System.Xml.Serialization.SoapElementAttribute("enqueueReturn")]
        public long[] enqueue(string domain, string[] messageBodies, string[] recipientNumbers, string[] senderNumbers, int[] encodings, string[] udhs, int[] messageClasses, int[] priorities, long[] checkingMessageIds) {
            object[] results = this.Invoke("enqueue", new object[] {
                        domain,
                        messageBodies,
                        recipientNumbers,
                        senderNumbers,
                        encodings,
                        udhs,
                        messageClasses,
                        priorities,
                        checkingMessageIds});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginenqueue(string domain, string[] messageBodies, string[] recipientNumbers, string[] senderNumbers, int[] encodings, string[] udhs, int[] messageClasses, int[] priorities, long[] checkingMessageIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("enqueue", new object[] {
                        domain,
                        messageBodies,
                        recipientNumbers,
                        senderNumbers,
                        encodings,
                        udhs,
                        messageClasses,
                        priorities,
                        checkingMessageIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public long[] Endenqueue(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void enqueueAsync(string domain, string[] messageBodies, string[] recipientNumbers, string[] senderNumbers, int[] encodings, string[] udhs, int[] messageClasses, int[] priorities, long[] checkingMessageIds) {
            this.enqueueAsync(domain, messageBodies, recipientNumbers, senderNumbers, encodings, udhs, messageClasses, priorities, checkingMessageIds, null);
        }
        
        /// <remarks/>
        public void enqueueAsync(string domain, string[] messageBodies, string[] recipientNumbers, string[] senderNumbers, int[] encodings, string[] udhs, int[] messageClasses, int[] priorities, long[] checkingMessageIds, object userState) {
            if ((this.enqueueOperationCompleted == null)) {
                this.enqueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnenqueueOperationCompleted);
            }
            this.InvokeAsync("enqueue", new object[] {
                        domain,
                        messageBodies,
                        recipientNumbers,
                        senderNumbers,
                        encodings,
                        udhs,
                        messageClasses,
                        priorities,
                        checkingMessageIds}, this.enqueueOperationCompleted, userState);
        }
        
        private void OnenqueueOperationCompleted(object arg) {
            if ((this.enqueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.enqueueCompleted(this, new enqueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://magfa.com/soap/SOAPSmsQueue", ResponseNamespace="http://magfa.com/soap/SOAPSmsQueue")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMessageStatusesReturn")]
        public int[] getMessageStatuses(long[] messageIds) {
            object[] results = this.Invoke("getMessageStatuses", new object[] {
                        messageIds});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMessageStatuses(long[] messageIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMessageStatuses", new object[] {
                        messageIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public int[] EndgetMessageStatuses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void getMessageStatusesAsync(long[] messageIds) {
            this.getMessageStatusesAsync(messageIds, null);
        }
        
        /// <remarks/>
        public void getMessageStatusesAsync(long[] messageIds, object userState) {
            if ((this.getMessageStatusesOperationCompleted == null)) {
                this.getMessageStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMessageStatusesOperationCompleted);
            }
            this.InvokeAsync("getMessageStatuses", new object[] {
                        messageIds}, this.getMessageStatusesOperationCompleted, userState);
        }
        
        private void OngetMessageStatusesOperationCompleted(object arg) {
            if ((this.getMessageStatusesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMessageStatusesCompleted(this, new getMessageStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://magfa.com/soap/SOAPSmsQueue", ResponseNamespace="http://magfa.com/soap/SOAPSmsQueue")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMessageStatusReturn")]
        public int getMessageStatus(long messageId) {
            object[] results = this.Invoke("getMessageStatus", new object[] {
                        messageId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMessageStatus(long messageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMessageStatus", new object[] {
                        messageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndgetMessageStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getMessageStatusAsync(long messageId) {
            this.getMessageStatusAsync(messageId, null);
        }
        
        /// <remarks/>
        public void getMessageStatusAsync(long messageId, object userState) {
            if ((this.getMessageStatusOperationCompleted == null)) {
                this.getMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMessageStatusOperationCompleted);
            }
            this.InvokeAsync("getMessageStatus", new object[] {
                        messageId}, this.getMessageStatusOperationCompleted, userState);
        }
        
        private void OngetMessageStatusOperationCompleted(object arg) {
            if ((this.getMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMessageStatusCompleted(this, new getMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://magfa.com/soap/SOAPSmsQueue", ResponseNamespace="http://magfa.com/soap/SOAPSmsQueue")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCreditReturn")]
        public int getCredit(string domain) {
            object[] results = this.Invoke("getCredit", new object[] {
                        domain});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetCredit(string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getCredit", new object[] {
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndgetCredit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getCreditAsync(string domain) {
            this.getCreditAsync(domain, null);
        }
        
        /// <remarks/>
        public void getCreditAsync(string domain, object userState) {
            if ((this.getCreditOperationCompleted == null)) {
                this.getCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCreditOperationCompleted);
            }
            this.InvokeAsync("getCredit", new object[] {
                        domain}, this.getCreditOperationCompleted, userState);
        }
        
        private void OngetCreditOperationCompleted(object arg) {
            if ((this.getCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCreditCompleted(this, new getCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://magfa.com/soap/SOAPSmsQueue", ResponseNamespace="http://magfa.com/soap/SOAPSmsQueue")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMessageIdReturn")]
        public long getMessageId(string domain, long checkingMessageId) {
            object[] results = this.Invoke("getMessageId", new object[] {
                        domain,
                        checkingMessageId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMessageId(string domain, long checkingMessageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMessageId", new object[] {
                        domain,
                        checkingMessageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndgetMessageId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void getMessageIdAsync(string domain, long checkingMessageId) {
            this.getMessageIdAsync(domain, checkingMessageId, null);
        }
        
        /// <remarks/>
        public void getMessageIdAsync(string domain, long checkingMessageId, object userState) {
            if ((this.getMessageIdOperationCompleted == null)) {
                this.getMessageIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMessageIdOperationCompleted);
            }
            this.InvokeAsync("getMessageId", new object[] {
                        domain,
                        checkingMessageId}, this.getMessageIdOperationCompleted, userState);
        }
        
        private void OngetMessageIdOperationCompleted(object arg) {
            if ((this.getMessageIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMessageIdCompleted(this, new getMessageIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void enqueueCompletedEventHandler(object sender, enqueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class enqueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal enqueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getMessageStatusesCompletedEventHandler(object sender, getMessageStatusesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMessageStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMessageStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getMessageStatusCompletedEventHandler(object sender, getMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getCreditCompletedEventHandler(object sender, getCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getMessageIdCompletedEventHandler(object sender, getMessageIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMessageIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMessageIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591